# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T02:48:50+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class GoogleCloudServicebrokerV1beta1Binding(BaseModel):
    bind_resource: Optional[Dict[str, Any]] = Field(
        None,
        description='A JSON object that contains data for platform resources associated with\nthe binding to be created.',
    )
    binding_id: Optional[str] = Field(
        None,
        description='The id of the binding. Must be unique within GCP project.\nMaximum length is 64, GUID recommended.\nRequired.',
    )
    createTime: Optional[str] = Field(
        None, description='Output only. Timestamp for when the binding was created.'
    )
    deploymentName: Optional[str] = Field(
        None,
        description='Output only. String containing the Deployment Manager deployment name that was created\nfor this binding,',
    )
    parameters: Optional[Dict[str, Any]] = Field(
        None, description='Configuration options for the service binding.'
    )
    plan_id: Optional[str] = Field(
        None,
        description='The ID of the plan. See `Service` and `Plan` resources for details.\nMaximum length is 64, GUID recommended.\nRequired.',
    )
    resourceName: Optional[str] = Field(
        None,
        description='Output only. The resource name of the binding, e.g.\nprojects/project_id/brokers/broker_id/service_instances/instance_id/bindings/binding_id.',
    )
    service_id: Optional[str] = Field(
        None,
        description='The id of the service. Must be a valid identifier of a service\ncontained in the list from a `ListServices()` call.\nMaximum length is 64, GUID recommended.\nRequired.',
    )


class GoogleCloudServicebrokerV1beta1Broker(BaseModel):
    createTime: Optional[str] = Field(
        None, description='Output only. Timestamp for when the broker was created.'
    )
    name: Optional[str] = Field(
        None,
        description='Name of the broker in the format:\n<projects>/<project-id>/brokers/<broker>.\nThis allows for multiple brokers per project which can be used to\nenable having custom brokers per GKE cluster, for example.',
    )
    title: Optional[str] = Field(
        None,
        description='User friendly title of the broker.\nLimited to 1024 characters. Requests with longer titles will be rejected.',
    )
    url: Optional[str] = Field(
        None,
        description='Output only. URL of the broker OSB-compliant endpoint, for example:\nhttps://servicebroker.googleapis.com/projects/<project>/brokers/<broker>',
    )


class GoogleCloudServicebrokerV1beta1CreateBindingResponse(BaseModel):
    credentials: Optional[Dict[str, Any]] = Field(
        None, description='Credentials to use the binding.'
    )
    description: Optional[str] = Field(
        None,
        description='Used to communicate description of the response. Usually for non-standard\nerror codes.\nhttps://github.com/openservicebrokerapi/servicebroker/blob/master/spec.md#service-broker-errors',
    )
    operation: Optional[str] = Field(
        None,
        description='If broker executes operation asynchronously, this is the operation ID that\ncan be polled to check the completion status of said operation.\nThis broker always executes all create/delete operations asynchronously.',
    )
    route_service_url: Optional[str] = Field(
        None,
        description='A URL to which the platform may proxy requests for the address sent with\nbind_resource.route',
    )
    syslog_drain_url: Optional[str] = Field(
        None, description='From where to read system logs.'
    )
    volume_mounts: Optional[List[Dict[str, Any]]] = Field(
        None, description='An array of configuration for mounting volumes.'
    )


class GoogleCloudServicebrokerV1beta1CreateServiceInstanceResponse(BaseModel):
    description: Optional[str] = Field(
        None,
        description='Used to communicate description of the response. Usually for non-standard\nerror codes.\nhttps://github.com/openservicebrokerapi/servicebroker/blob/master/spec.md#service-broker-errors',
    )
    operation: Optional[str] = Field(
        None,
        description='If broker executes operation asynchronously, this is the operation ID that\ncan be polled to check the completion status of said operation.\nThis broker always will return a non-empty operation on success.',
    )


class GoogleCloudServicebrokerV1beta1DashboardClient(BaseModel):
    id: Optional[str] = Field(
        None, description='The id of the Oauth client that the dashboard will use.'
    )
    redirect_uri: Optional[str] = Field(
        None,
        description='A URI for the service dashboard.\nValidated by the OAuth token server when the dashboard requests a token.',
    )
    secret: Optional[str] = Field(
        None, description='A secret for the dashboard client.'
    )


class GoogleCloudServicebrokerV1beta1DeleteBindingResponse(BaseModel):
    description: Optional[str] = Field(
        None,
        description='Used to communicate description of the response. Usually for non-standard\nerror codes.\nhttps://github.com/openservicebrokerapi/servicebroker/blob/master/spec.md#service-broker-errors',
    )
    operation: Optional[str] = Field(
        None,
        description='If broker executes operation asynchronously, this is the operation ID that\ncan be polled to check the completion status of said operation.',
    )


class GoogleCloudServicebrokerV1beta1DeleteServiceInstanceResponse(BaseModel):
    description: Optional[str] = Field(
        None,
        description='Used to communicate description of the response. Usually for non-standard\nerror codes.\nhttps://github.com/openservicebrokerapi/servicebroker/blob/master/spec.md#service-broker-errors',
    )
    operation: Optional[str] = Field(
        None,
        description='If broker executes operation asynchronously, this is the operation ID that\ncan be polled to check the completion status of said operation.',
    )


class GoogleCloudServicebrokerV1beta1GetBindingResponse(BaseModel):
    credentials: Optional[Dict[str, Any]] = Field(
        None, description='Credentials to use the binding.'
    )
    deploymentName: Optional[str] = Field(
        None,
        description='String containing the Deployment Manager deployment name that was created\nfor this binding,',
    )
    description: Optional[str] = Field(
        None,
        description='Used to communicate description of the response. Usually for non-standard\nerror codes.\nhttps://github.com/openservicebrokerapi/servicebroker/blob/master/spec.md#service-broker-errors',
    )
    resourceName: Optional[str] = Field(
        None,
        description='Output only. The resource name of the binding, e.g.\nprojects/project_id/brokers/broker_id/service_instances/instance_id/bindings/binding_id.',
    )
    route_service_url: Optional[str] = Field(
        None,
        description='A URL to which the platform may proxy requests for the address sent with\nbind_resource.route',
    )
    syslog_drain_url: Optional[str] = Field(
        None, description='From where to read system logs.'
    )
    volume_mounts: Optional[List[Dict[str, Any]]] = Field(
        None, description='An array of configurations for mounting volumes.'
    )


class GoogleCloudServicebrokerV1beta1ListBindingsResponse(BaseModel):
    bindings: Optional[List[GoogleCloudServicebrokerV1beta1Binding]] = Field(
        None, description='The list of bindings in the instance.'
    )
    description: Optional[str] = Field(
        None,
        description='Used to communicate description of the response. Usually for non-standard\nerror codes.\nhttps://github.com/openservicebrokerapi/servicebroker/blob/master/spec.md#service-broker-errors',
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='This token allows you to get the next page of results for list requests.\nIf the number of results is larger than `pageSize`, use the `nextPageToken`\nas a value for the query parameter `pageToken` in the next list request.\nSubsequent list requests will have their own `nextPageToken` to continue\npaging through the results',
    )


class GoogleCloudServicebrokerV1beta1ListBrokersResponse(BaseModel):
    brokers: Optional[List[GoogleCloudServicebrokerV1beta1Broker]] = Field(
        None, description='The list of brokers in the container.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='This token allows you to get the next page of results for list requests.\nIf the number of results is larger than `pageSize`, use the `nextPageToken`\nas a value for the query parameter `pageToken` in the next list request.\nSubsequent list requests will have their own `nextPageToken` to continue\npaging through the results',
    )


class GoogleCloudServicebrokerV1beta1Operation(BaseModel):
    description: Optional[str] = Field(
        None, description='Optional description of the Operation state.'
    )
    state: Optional[str] = Field(
        None,
        description='The state of the operation.\nValid values are: "in progress", "succeeded", and "failed".',
    )


class GoogleCloudServicebrokerV1beta1Plan(BaseModel):
    bindable: Optional[bool] = Field(
        None,
        description='Specifies whether instances of the service can be bound to applications.\nIf not specified, `Service.bindable` will be presumed.',
    )
    description: Optional[str] = Field(
        None, description='Textual description of the plan. Optional.'
    )
    free: Optional[bool] = Field(None, description='Whether the service is free.')
    id: Optional[str] = Field(
        None,
        description='ID is a globally unique identifier used to uniquely identify the plan.\nUser must make no presumption about the format of this field.',
    )
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description='A list of metadata for a service offering.\nMetadata is an arbitrary JSON object.',
    )
    name: Optional[str] = Field(
        None,
        description='User friendly name of the plan.\nThe name must be globally unique within GCP project.\nNote, which is different from ("This must be globally unique within a\nplatform marketplace").',
    )
    schemas: Optional[Dict[str, Any]] = Field(
        None,
        description='Schema definitions for service instances and bindings for the plan.',
    )


class GoogleCloudServicebrokerV1beta1Service(BaseModel):
    bindable: Optional[bool] = Field(
        None,
        description='Specifies whether instances of the service can be bound to applications.\nRequired.',
    )
    binding_retrievable: Optional[bool] = Field(
        None,
        description='Whether the service provides an endpoint to get service bindings.',
    )
    bindings_retrievable: Optional[bool] = Field(
        None,
        description='Whether the service provides an endpoint to get service bindings.',
    )
    dashboard_client: Optional[GoogleCloudServicebrokerV1beta1DashboardClient] = Field(
        None, description='Information to activate Dashboard SSO feature.'
    )
    description: Optional[str] = Field(
        None, description='Textual description of the service. Required.'
    )
    id: Optional[str] = Field(
        None,
        description='ID is a globally unique identifier used to uniquely identify the service.\nID is an opaque string.',
    )
    instances_retrievable: Optional[bool] = Field(
        None,
        description='Whether the service provides an endpoint to get service instances.',
    )
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description='A list of metadata for a service offering.\nMetadata is an arbitrary JSON object.',
    )
    name: Optional[str] = Field(
        None,
        description='User friendly service name.\nName must match [a-z0-9]+ regexp.\nThe name must be globally unique within GCP project.\nNote, which is different from ("This must be globally unique within a\nplatform marketplace").\nRequired.',
    )
    plan_updateable: Optional[bool] = Field(
        None,
        description='Whether the service supports upgrade/downgrade for some plans.',
    )
    plans: Optional[List[GoogleCloudServicebrokerV1beta1Plan]] = Field(
        None,
        description='A list of plans for this service.\nAt least one plan is required.',
    )
    tags: Optional[List[str]] = Field(
        None,
        description='Tags provide a flexible mechanism to expose a classification, attribute, or\nbase technology of a service.',
    )


class GoogleCloudServicebrokerV1beta1ServiceInstance(BaseModel):
    context: Optional[Dict[str, Any]] = Field(
        None,
        description='Platform specific contextual information under which the service instance\nis to be provisioned. This replaces organization_guid and space_guid.\nBut can also contain anything.\nCurrently only used for logging context information.',
    )
    createTime: Optional[str] = Field(
        None, description='Output only. Timestamp for when the instance was created.'
    )
    deploymentName: Optional[str] = Field(
        None,
        description='Output only. String containing the Deployment Manager deployment name that was created\nfor this instance,',
    )
    description: Optional[str] = Field(
        None,
        description='To return errors when GetInstance call is done via HTTP to be unified with\nother methods.',
    )
    instance_id: Optional[str] = Field(
        None,
        description='The id of the service instance. Must be unique within GCP project.\nMaximum length is 64, GUID recommended.\nRequired.',
    )
    organization_guid: Optional[str] = Field(
        None,
        description='The platform GUID for the organization under which the service is to be\nprovisioned.\nRequired.',
    )
    parameters: Optional[Dict[str, Any]] = Field(
        None,
        description='Configuration options for the service instance.\nParameters is JSON object serialized to string.',
    )
    plan_id: Optional[str] = Field(
        None,
        description='The ID of the plan. See `Service` and `Plan` resources for details.\nMaximum length is 64, GUID recommended.\nRequired.',
    )
    previous_values: Optional[Dict[str, Any]] = Field(
        None,
        description='Used only in UpdateServiceInstance request to optionally specify previous\nfields.',
    )
    resourceName: Optional[str] = Field(
        None,
        description='Output only. The resource name of the instance, e.g.\nprojects/project_id/brokers/broker_id/service_instances/instance_id',
    )
    service_id: Optional[str] = Field(
        None,
        description='The id of the service. Must be a valid identifier of a service\ncontained in the list from a `ListServices()` call.\nMaximum length is 64, GUID recommended.\nRequired.',
    )
    space_guid: Optional[str] = Field(
        None,
        description='The identifier for the project space within the platform organization.\nRequired.',
    )


class GoogleCloudServicebrokerV1beta1UpdateServiceInstanceResponse(BaseModel):
    description: Optional[str] = Field(
        None,
        description='Used to communicate description of the response. Usually for non-standard\nerror codes.\nhttps://github.com/openservicebrokerapi/servicebroker/blob/master/spec.md#service-broker-errors',
    )
    operation: Optional[str] = Field(
        None,
        description='If broker executes operation asynchronously, this is the operation ID that\ncan be polled to check the completion status of said operation.',
    )


class GoogleIamV1TestIamPermissionsRequest(BaseModel):
    permissions: Optional[List[str]] = Field(
        None,
        description="The set of permissions to check for the `resource`. Permissions with\nwildcards (such as '*' or 'storage.*') are not allowed. For more\ninformation see\n[IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).",
    )


class GoogleIamV1TestIamPermissionsResponse(BaseModel):
    permissions: Optional[List[str]] = Field(
        None,
        description='A subset of `TestPermissionsRequest.permissions` that the caller is\nallowed.',
    )


class GoogleProtobufEmpty(BaseModel):
    pass


class GoogleTypeExpr(BaseModel):
    description: Optional[str] = Field(
        None,
        description='An optional description of the expression. This is a longer text which\ndescribes the expression, e.g. when hovered over it in a UI.',
    )
    expression: Optional[str] = Field(
        None,
        description='Textual representation of an expression in\nCommon Expression Language syntax.\n\nThe application context of the containing message determines which\nwell-known feature set of CEL is supported.',
    )
    location: Optional[str] = Field(
        None,
        description='An optional string indicating the location of the expression for error\nreporting, e.g. a file name and a position in the file.',
    )
    title: Optional[str] = Field(
        None,
        description='An optional title for the expression, i.e. a short string describing\nits purpose. This can be used e.g. in UIs which allow to enter the\nexpression.',
    )


class FieldXgafv(Enum):
    field_1 = '1'
    field_2 = '2'


class Alt(Enum):
    json = 'json'
    media = 'media'
    proto = 'proto'


class GoogleCloudServicebrokerV1beta1ListCatalogResponse(BaseModel):
    description: Optional[str] = Field(
        None,
        description='Used to communicate description of the response. Usually for non-standard\nerror codes.\nhttps://github.com/openservicebrokerapi/servicebroker/blob/master/spec.md#service-broker-errors',
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='This token allows you to get the next page of results for list requests.\nIf the number of results is larger than `pageSize`, use the `nextPageToken`\nas a value for the query parameter `pageToken` in the next list request.\nSubsequent list requests will have their own `nextPageToken` to continue\npaging through the results',
    )
    services: Optional[List[GoogleCloudServicebrokerV1beta1Service]] = Field(
        None, description='The services available for the requested GCP project.'
    )


class GoogleCloudServicebrokerV1beta1ListServiceInstancesResponse(BaseModel):
    description: Optional[str] = Field(
        None,
        description='Used to communicate description of the response. Usually for non-standard\nerror codes.\nhttps://github.com/openservicebrokerapi/servicebroker/blob/master/spec.md#service-broker-errors',
    )
    instances: Optional[List[GoogleCloudServicebrokerV1beta1ServiceInstance]] = Field(
        None, description='The list of instances in the broker.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='This token allows you to get the next page of results for list requests.\nIf the number of results is larger than `pageSize`, use the `nextPageToken`\nas a value for the query parameter `pageToken` in the next list request.\nSubsequent list requests will have their own `nextPageToken` to continue\npaging through the results',
    )


class GoogleIamV1Binding(BaseModel):
    condition: Optional[GoogleTypeExpr] = Field(
        None,
        description='The condition that is associated with this binding.\nNOTE: An unsatisfied condition will not allow user access via current\nbinding. Different bindings, including their conditions, are examined\nindependently.',
    )
    members: Optional[List[str]] = Field(
        None,
        description='Specifies the identities requesting access for a Cloud Platform resource.\n`members` can have the following values:\n\n* `allUsers`: A special identifier that represents anyone who is\n   on the internet; with or without a Google account.\n\n* `allAuthenticatedUsers`: A special identifier that represents anyone\n   who is authenticated with a Google account or a service account.\n\n* `user:{emailid}`: An email address that represents a specific Google\n   account. For example, `alice@example.com` .\n\n\n* `serviceAccount:{emailid}`: An email address that represents a service\n   account. For example, `my-other-app@appspot.gserviceaccount.com`.\n\n* `group:{emailid}`: An email address that represents a Google group.\n   For example, `admins@example.com`.\n\n* `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique\n   identifier) representing a user that has been recently deleted. For\n   example, `alice@example.com?uid=123456789012345678901`. If the user is\n   recovered, this value reverts to `user:{emailid}` and the recovered user\n   retains the role in the binding.\n\n* `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus\n   unique identifier) representing a service account that has been recently\n   deleted. For example,\n   `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`.\n   If the service account is undeleted, this value reverts to\n   `serviceAccount:{emailid}` and the undeleted service account retains the\n   role in the binding.\n\n* `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique\n   identifier) representing a Google group that has been recently\n   deleted. For example, `admins@example.com?uid=123456789012345678901`. If\n   the group is recovered, this value reverts to `group:{emailid}` and the\n   recovered group retains the role in the binding.\n\n\n* `domain:{domain}`: The G Suite domain (primary) that represents all the    users of that domain. For example, `google.com` or `example.com`.\n\n',
    )
    role: Optional[str] = Field(
        None,
        description='Role that is assigned to `members`.\nFor example, `roles/viewer`, `roles/editor`, or `roles/owner`.',
    )


class GoogleIamV1Policy(BaseModel):
    bindings: Optional[List[GoogleIamV1Binding]] = Field(
        None,
        description='Associates a list of `members` to a `role`. Optionally, may specify a\n`condition` that determines how and when the `bindings` are applied. Each\nof the `bindings` must contain at least one member.',
    )
    etag: Optional[str] = Field(
        None,
        description='`etag` is used for optimistic concurrency control as a way to help\nprevent simultaneous updates of a policy from overwriting each other.\nIt is strongly suggested that systems make use of the `etag` in the\nread-modify-write cycle to perform policy updates in order to avoid race\nconditions: An `etag` is returned in the response to `getIamPolicy`, and\nsystems are expected to put that etag in the request to `setIamPolicy` to\nensure that their change will be applied to the same version of the policy.\n\n**Important:** If you use IAM Conditions, you must include the `etag` field\nwhenever you call `setIamPolicy`. If you omit this field, then IAM allows\nyou to overwrite a version `3` policy with a version `1` policy, and all of\nthe conditions in the version `3` policy are lost.',
    )
    version: Optional[int] = Field(
        None,
        description='Specifies the format of the policy.\n\nValid values are `0`, `1`, and `3`. Requests that specify an invalid value\nare rejected.\n\nAny operation that affects conditional role bindings must specify version\n`3`. This requirement applies to the following operations:\n\n* Getting a policy that includes a conditional role binding\n* Adding a conditional role binding to a policy\n* Changing a conditional role binding in a policy\n* Removing any role binding, with or without a condition, from a policy\n  that includes conditions\n\n**Important:** If you use IAM Conditions, you must include the `etag` field\nwhenever you call `setIamPolicy`. If you omit this field, then IAM allows\nyou to overwrite a version `3` policy with a version `1` policy, and all of\nthe conditions in the version `3` policy are lost.\n\nIf a policy does not include any conditions, operations on that policy may\nspecify any valid version or leave the field unset.',
    )


class GoogleIamV1SetIamPolicyRequest(BaseModel):
    policy: Optional[GoogleIamV1Policy] = Field(
        None,
        description='REQUIRED: The complete policy to be applied to the `resource`. The size of\nthe policy is limited to a few 10s of KB. An empty policy is a\nvalid policy but certain Cloud Platform services (such as Projects)\nmight reject them.',
    )
