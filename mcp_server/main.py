# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T02:48:50+00:00



import argparse
import json
import os
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity, UnsuportedSecurityStub
from fastapi import Query

from models import (
    Alt,
    FieldXgafv,
    GoogleCloudServicebrokerV1beta1Binding,
    GoogleCloudServicebrokerV1beta1Broker,
    GoogleCloudServicebrokerV1beta1CreateBindingResponse,
    GoogleCloudServicebrokerV1beta1CreateServiceInstanceResponse,
    GoogleCloudServicebrokerV1beta1DeleteBindingResponse,
    GoogleCloudServicebrokerV1beta1GetBindingResponse,
    GoogleCloudServicebrokerV1beta1ListBindingsResponse,
    GoogleCloudServicebrokerV1beta1ListBrokersResponse,
    GoogleCloudServicebrokerV1beta1ListCatalogResponse,
    GoogleCloudServicebrokerV1beta1ListServiceInstancesResponse,
    GoogleCloudServicebrokerV1beta1Operation,
    GoogleCloudServicebrokerV1beta1ServiceInstance,
    GoogleCloudServicebrokerV1beta1UpdateServiceInstanceResponse,
    GoogleIamV1Policy,
    GoogleIamV1SetIamPolicyRequest,
    GoogleIamV1TestIamPermissionsRequest,
    GoogleIamV1TestIamPermissionsResponse,
)

app = MCPProxy(
    contact={'name': 'Google', 'url': 'https://google.com'},
    description='The Google Cloud Platform Service Broker API provides Google hosted\nimplementation of the Open Service Broker API\n(https://www.openservicebrokerapi.org/).\n',
    license={
        'name': 'Creative Commons Attribution 3.0',
        'url': 'http://creativecommons.org/licenses/by/3.0/',
    },
    termsOfService='https://developers.google.com/terms/',
    title='Service Broker',
    version='v1beta1',
    servers=[{'url': 'https://servicebroker.googleapis.com/'}],
)


@app.delete(
    '/v1beta1/{name}',
    description=""" Unbinds from a service instance.
For synchronous/asynchronous request details see CreateServiceInstance
method.
If binding does not exist HTTP 410 status will be returned. """,
    tags=['service_instance_management', 'service_broker_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def delete_service_instance_binding(
    name: str,
    accepts_incomplete: Optional[bool] = Query(None, alias='acceptsIncomplete'),
    plan_id: Optional[str] = Query(None, alias='planId'),
    service_id: Optional[str] = Query(None, alias='serviceId'),
    fields: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    callback: Optional[str] = None,
    oauth_token: Optional[str] = None,
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    alt: Optional[Alt] = 'json',
    access_token: Optional[str] = None,
    key: Optional[str] = None,
    upload_protocol: Optional[str] = None,
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1beta1/{name}',
    description=""" GetBinding returns the binding information. """,
    tags=['service_instance_management', 'service_broker_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_service_instance_bindings(
    name: str,
    plan_id: Optional[str] = Query(None, alias='planId'),
    service_id: Optional[str] = Query(None, alias='serviceId'),
    fields: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    callback: Optional[str] = None,
    oauth_token: Optional[str] = None,
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    alt: Optional[Alt] = 'json',
    access_token: Optional[str] = None,
    key: Optional[str] = None,
    upload_protocol: Optional[str] = None,
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/v1beta1/{name}',
    description=""" Updates an existing service instance.
See CreateServiceInstance for possible response codes. """,
    tags=['service_instance_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def servicebroker_projects_brokers_v2_service_instances_patch(
    name: str,
    accepts_incomplete: Optional[bool] = Query(None, alias='acceptsIncomplete'),
    fields: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    callback: Optional[str] = None,
    oauth_token: Optional[str] = None,
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    alt: Optional[Alt] = 'json',
    access_token: Optional[str] = None,
    key: Optional[str] = None,
    upload_protocol: Optional[str] = None,
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    body: GoogleCloudServicebrokerV1beta1ServiceInstance = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1beta1/{name}/last_operation',
    description=""" Returns the state of the last operation for the binding.
Only last (or current) operation can be polled. """,
    tags=['service_instance_management', 'service_broker_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def get_service_instance_last_operation(
    name: str,
    operation: Optional[str] = None,
    plan_id: Optional[str] = Query(None, alias='planId'),
    service_id: Optional[str] = Query(None, alias='serviceId'),
    fields: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    callback: Optional[str] = None,
    oauth_token: Optional[str] = None,
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    alt: Optional[Alt] = 'json',
    access_token: Optional[str] = None,
    key: Optional[str] = None,
    upload_protocol: Optional[str] = None,
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1beta1/{parent}/bindings',
    description=""" Lists all the bindings in the instance. """,
    tags=['service_instance_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def servicebroker_projects_brokers_instances_bindings_list(
    parent: str,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    page_token: Optional[str] = Query(None, alias='pageToken'),
    fields: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    callback: Optional[str] = None,
    oauth_token: Optional[str] = None,
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    alt: Optional[Alt] = 'json',
    access_token: Optional[str] = None,
    key: Optional[str] = None,
    upload_protocol: Optional[str] = None,
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1beta1/{parent}/brokers',
    description=""" ListBrokers lists brokers. """,
    tags=['service_broker_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def servicebroker_projects_brokers_list(
    parent: str,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    page_token: Optional[str] = Query(None, alias='pageToken'),
    fields: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    callback: Optional[str] = None,
    oauth_token: Optional[str] = None,
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    alt: Optional[Alt] = 'json',
    access_token: Optional[str] = None,
    key: Optional[str] = None,
    upload_protocol: Optional[str] = None,
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1beta1/{parent}/brokers',
    description=""" CreateBroker creates a Broker. """,
    tags=['service_instance_management', 'service_broker_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def servicebroker_projects_brokers_create(
    parent: str,
    fields: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    callback: Optional[str] = None,
    oauth_token: Optional[str] = None,
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    alt: Optional[Alt] = 'json',
    access_token: Optional[str] = None,
    key: Optional[str] = None,
    upload_protocol: Optional[str] = None,
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    body: GoogleCloudServicebrokerV1beta1Broker = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1beta1/{parent}/instances',
    description=""" Lists all the instances in the brokers
This API is an extension and not part of the OSB spec.
Hence the path is a standard Google API URL. """,
    tags=['service_instance_management', 'service_broker_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def servicebroker_projects_brokers_instances_list(
    parent: str,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    page_token: Optional[str] = Query(None, alias='pageToken'),
    fields: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    callback: Optional[str] = None,
    oauth_token: Optional[str] = None,
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    alt: Optional[Alt] = 'json',
    access_token: Optional[str] = None,
    key: Optional[str] = None,
    upload_protocol: Optional[str] = None,
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v1beta1/{parent}/service_bindings/{binding_id}',
    description=""" CreateBinding generates a service binding to an existing service instance.
See ProviServiceInstance for async operation details. """,
    tags=['service_instance_management', 'service_broker_handling'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def create_service_binding(
    parent: str,
    binding_id: str = ...,
    accepts_incomplete: Optional[bool] = Query(None, alias='acceptsIncomplete'),
    fields: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    callback: Optional[str] = None,
    oauth_token: Optional[str] = None,
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    alt: Optional[Alt] = 'json',
    access_token: Optional[str] = None,
    key: Optional[str] = None,
    upload_protocol: Optional[str] = None,
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    body: GoogleCloudServicebrokerV1beta1Binding = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1beta1/{parent}/v2/catalog',
    description=""" Lists all the Services registered with this broker for consumption for
given service registry broker, which contains an set of services.
Note, that Service producer API is separate from Broker API. """,
    tags=['service_instance_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def servicebroker_projects_brokers_v2_catalog_list(
    parent: str,
    page_size: Optional[int] = Query(None, alias='pageSize'),
    page_token: Optional[str] = Query(None, alias='pageToken'),
    fields: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    callback: Optional[str] = None,
    oauth_token: Optional[str] = None,
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    alt: Optional[Alt] = 'json',
    access_token: Optional[str] = None,
    key: Optional[str] = None,
    upload_protocol: Optional[str] = None,
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/v1beta1/{parent}/v2/service_instances/{instance_id}',
    description=""" Provisions a service instance.
If `request.accepts_incomplete` is false and Broker cannot execute request
synchronously HTTP 422 error will be returned along with
FAILED_PRECONDITION status.
If `request.accepts_incomplete` is true and the Broker decides to execute
resource asynchronously then HTTP 202 response code will be returned and a
valid polling operation in the response will be included.
If Broker executes the request synchronously and it succeeds HTTP 201
response will be furnished.
If identical instance exists, then HTTP 200 response will be returned.
If an instance with identical ID but mismatching parameters exists, then
HTTP 409 status code will be returned. """,
    tags=['service_instance_management'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def servicebroker_projects_brokers_v2_service_instances_create(
    parent: str,
    instance_id: str = ...,
    accepts_incomplete: Optional[bool] = Query(None, alias='acceptsIncomplete'),
    fields: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    callback: Optional[str] = None,
    oauth_token: Optional[str] = None,
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    alt: Optional[Alt] = 'json',
    access_token: Optional[str] = None,
    key: Optional[str] = None,
    upload_protocol: Optional[str] = None,
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    body: GoogleCloudServicebrokerV1beta1ServiceInstance = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1beta1/{resource}:getIamPolicy',
    description=""" Gets the access control policy for a resource.
Returns an empty policy if the resource exists and does not have a policy
set. """,
    tags=['iam_policy_administration'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def servicebroker_get_iam_policy(
    resource: str,
    options_requested_policy_version: Optional[int] = Query(
        None, alias='options.requestedPolicyVersion'
    ),
    fields: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    callback: Optional[str] = None,
    oauth_token: Optional[str] = None,
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    alt: Optional[Alt] = 'json',
    access_token: Optional[str] = None,
    key: Optional[str] = None,
    upload_protocol: Optional[str] = None,
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1beta1/{resource}:setIamPolicy',
    description=""" Sets the access control policy on the specified resource. Replaces any
existing policy.

Can return Public Errors: NOT_FOUND, INVALID_ARGUMENT and PERMISSION_DENIED """,
    tags=['iam_policy_administration'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def servicebroker_set_iam_policy(
    resource: str,
    fields: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    callback: Optional[str] = None,
    oauth_token: Optional[str] = None,
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    alt: Optional[Alt] = 'json',
    access_token: Optional[str] = None,
    key: Optional[str] = None,
    upload_protocol: Optional[str] = None,
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    body: GoogleIamV1SetIamPolicyRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/v1beta1/{resource}:testIamPermissions',
    description=""" Returns permissions that a caller has on the specified resource.
If the resource does not exist, this will return an empty set of
permissions, not a NOT_FOUND error.

Note: This operation is designed to be used for building permission-aware
UIs and command-line tools, not for authorization checking. This operation
may "fail open" without warning. """,
    tags=['iam_policy_administration'],
    security=[
        UnsuportedSecurityStub(name="None"),
        UnsuportedSecurityStub(name="None"),
    ],
)
def servicebroker_test_iam_permissions(
    resource: str,
    fields: Optional[str] = None,
    upload_type: Optional[str] = Query(None, alias='uploadType'),
    callback: Optional[str] = None,
    oauth_token: Optional[str] = None,
    field__xgafv: Optional[FieldXgafv] = Query(None, alias='$.xgafv'),
    alt: Optional[Alt] = 'json',
    access_token: Optional[str] = None,
    key: Optional[str] = None,
    upload_protocol: Optional[str] = None,
    quota_user: Optional[str] = Query(None, alias='quotaUser'),
    pretty_print: Optional[bool] = Query(True, alias='prettyPrint'),
    body: GoogleIamV1TestIamPermissionsRequest = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
